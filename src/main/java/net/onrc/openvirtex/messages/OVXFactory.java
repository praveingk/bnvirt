// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_factory_interface.java
// Do not modify

package net.onrc.openvirtex.messages;

import java.util.List;
import java.util.Set;

import net.onrc.openvirtex.messages.actions.*;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionNetworkLayerDestinationVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionNetworkLayerSourceVer10;
import net.onrc.openvirtex.messages.actions.ver13.OVXActionPopVlanVer13;
import net.onrc.openvirtex.messages.statistics.*;
import net.onrc.openvirtex.messages.statistics.ver10.OVXFlowStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXFlowStatsRequestVer10;
import net.onrc.openvirtex.messages.OVXGetConfigReply;
import net.onrc.openvirtex.protocol.OVXMatch;

import net.onrc.openvirtex.protocol.OVXMatchV3;
import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.instruction.OFInstruction;
import org.projectfloodlight.openflow.protocol.match.Match;
import org.projectfloodlight.openflow.protocol.oxm.OFOxm;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.protocol.action.OFAction;
import org.projectfloodlight.openflow.protocol.action.OFActionEnqueue;
import org.projectfloodlight.openflow.protocol.action.OFActionOutput;
import org.projectfloodlight.openflow.protocol.action.OFActionSetDlDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetDlSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwTos;
import org.projectfloodlight.openflow.protocol.action.OFActionSetTpDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetTpSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetVlanPcp;
import org.projectfloodlight.openflow.protocol.action.OFActionSetVlanVid;
import org.projectfloodlight.openflow.protocol.action.OFActionStripVlan;


public interface OVXFactory{

	OVXFlowModify buildOVXFlowModify(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions);

	OVXFlowDeleteStrict buildOVXFlowDeleteStrict(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions);

	OVXFlowAdd buildOVXFlowAdd(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions);

	OVXFlowModifyStrict buildOVXFlowModifyStrict(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions);

	OVXFlowDelete buildOVXFlowDelete(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions);

	OVXFlowModify buildOVXFlowModify(long xid,
									 Match match,
									 U64 cookie,
									 int idleTimeout,
									 int hardTimeout,
									 int priority,
									 OFBufferId bufferId,
									 OFPort outPort,
									 Set<OFFlowModFlags> flags,
									 List<OFAction> actions);
	
	OVXFlowDeleteStrict buildOVXFlowDeleteStrict(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions);

	OVXFlowAdd buildOVXFlowAdd(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions);

	OVXFlowModifyStrict buildOVXFlowModifyStrict(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions);
	
	OVXFlowDelete buildOVXFlowDelete(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions);
	
	OVXDescStatsReply buildOVXDescStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			String mfrDesc, String hwDesc, String swDesc, String serialNum,
			String dpDesc);

	OVXPortDescStatsReply buildOVXPortDescStatsReply(long xid, Set<OFStatsReplyFlags> flags, List<OFPortDesc> entries);

	OVXRoleReply buildOVXRoleReply(long xid, OFControllerRole role, U64 generationId);

	OVXRoleRequest buildOVXRoleRequest(long xid, OFControllerRole role, U64 generationId);

	OVXPacketIn buildOVXPacketIn(); 
	OVXPacketIn buildOVXPacketIn(final OVXPacketIn pktIn);
	OVXPacketIn buildOVXPacketIn(final byte[] data, final short portNumber);


	OVXPacketIn buildOVXPacketIn(long xid,
								 OFBufferId bufferId,
								 int totalLen,
								 OFPacketInReason reason,
								 TableId tableId,
								 U64 cookie,
								 Match match,
								 byte[] data);

	OVXBadRequestErrorMsg buildOVXBadRequestErrorMsg(long xid,
													 OFBadRequestCode code, OFErrorCauseData data);

	OVXBadActionErrorMsg buildOVXBadActionErrorMsg(long xid, OFBadActionCode code,
			OFErrorCauseData msg);

	OVXFlowModFailedErrorMsg buildOVXFlowModFailedErrorMsg(long xid,
			OFFlowModFailedCode code, OFErrorCauseData offendingMsg);

	OVXPortModFailedErrorMsg buildOVXPortModFailedErrorMsg(long xid,
			OFPortModFailedCode code, OFErrorCauseData offendingMsg);


	OVXFlowStatsReply buildOVXFlowStatsReply(long xid,
			Set<OFStatsReplyFlags> flags, List<OFFlowStatsEntry> entries);


	OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid,
			Set<OFStatsRequestFlags> flags, Match match, TableId tableId,
			OFPort outPort);

	OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid,
												 Set<OFStatsRequestFlags> flags,
												 TableId tableId,
												 OFPort outPort,
												 OFGroup outGroup,
												 U64 cookie,
												 U64 cookieMask,
												 Match match);

	OVXMatch buildOVXMatchV1(int wildcards, OFPort inPort, MacAddress ethSrc,
							 MacAddress ethDst, OFVlanVidMatch vlanVid, VlanPcp vlanPcp,
							 EthType ethType, IpDscp ipDscp, IpProtocol ipProto,
							 IPv4Address ipv4Src, IPv4Address ipv4Dst, TransportPort tcpSrc,
							 TransportPort tcpDst, long cookie, byte[] pktData);

	OVXPortStatsRequest buildOVXPortStatsRequest(
			long xid, Set<OFStatsRequestFlags> flags, OFPort portNo);

	OVXMatch buildOVXMatchV1(Match match);

	OVXActionNetworkLayerSource buildOVXActionNetworkLayerSource(IPv4Address nwAddr);

	OVXActionNetworkLayerDestination buildOVXActionNetworkLayerDestination(
			IPv4Address nwAddr);

	OVXGetConfigReply buildOVXGetConfigReply(long xid, Set<OFConfigFlags> flags, int missSendLen);

	OVXPacketIn buildOVXPacketIn(long xid, OFBufferId bufferId, int totalLen,
			OFPort inPort, OFPacketInReason reason, byte[] data);

	OVXPacketOut buildOVXPacketOut();

	OVXPacketOut buildOVXPacketOut(final byte[] pktData, final OFPort inPort,
	            final OFPort outPort);

	OVXPacketOut buildOVXPacketOut(final OVXPacketOut pktOut);
	 
	OVXPacketOut buildOVXPacketOut(
			long xid,
			OFBufferId bufferId,
			OFPort inPort,
			List<OFAction> actions,
			byte[] data);

	OVXPortStatsReply buildOVXPortStatsReply(long xid,
			Set<OFStatsReplyFlags> flags, List<OFPortStatsEntry> entries);

	OVXHello buildOVXHello(long xid);

	OVXAggregateStatsReply buildOVXAggregateStatsReply(long xid,
			Set<OFStatsReplyFlags> flags, U64 packetCount, U64 byteCount,
			long flowCount);

	OVXQueueStatsReply buildOVXQueueStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFQueueStatsEntry> entries);

	OVXTableStatsReply buildOVXTableStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFTableStatsEntry> entries);

	OVXTableFeaturesStatsReply buildOVXTableFeaturesStatsReply(long xid, Set<OFStatsReplyFlags> flags,
											   List<OFTableFeatures> entries);

	OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid,
			Set<OFStatsRequestFlags> flags, Match match, TableId tableId,
			OFPort outPort);

	OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid,
														   Set<OFStatsRequestFlags> flags,
														   TableId tableId, OFPort outPort,
														   OFGroup outGroup,
														   U64 cookie,
														   U64 cookieMask,
														   Match match);

	OVXDescStatsRequest buildOVXDescStatsRequest(long xid,
												 Set<OFStatsRequestFlags> flags);
	OVXPortDescStatsRequest buildOVXPortDescStatsRequest(long xid,
														 Set<OFStatsRequestFlags> flags);

	OVXQueueStatsRequest buildOVXQueueStatsRequest(long xid,
			Set<OFStatsRequestFlags> flags, OFPort portNo, long queueId);

	OVXTableStatsRequest buildOVXTableStatsRequest(long xid,
			Set<OFStatsRequestFlags> flags);

	OVXTableFeaturesStatsRequest buildOVXTableFeaturesStatsRequest(long xid,
												   Set<OFStatsRequestFlags> flags, List<OFTableFeatures> entries);
	OVXHelloFailedErrorMsg buildOVXHelloFailedErrorMsg(long xid, OFHelloFailedCode code,
			OFErrorCauseData data);

	OVXQueueOpFailedErrorMsg buildOVXQueueOpFailedErrorMsg(long xid, OFQueueOpFailedCode code,
			OFErrorCauseData data);

	OVXBarrierReply buildOVXBarrierReply(long xid);

	OVXBarrierRequest buildOVXBarrierRequest(long xid);

	OVXEchoReply buildOVXEchoReply(long xid, byte[] data);

	OVXEchoRequest buildOVXEchoRequest(long xid, byte[] data);

	OVXFeaturesReply buildOVXFeaturesReply(long xid, DatapathId datapathId,
			long nBuffers, short nTables, Set<OFCapabilities> capabilities,
			Set<OFActionType> actions, List<OFPortDesc> ports);

	OVXFeaturesReply buildOVXFeaturesReply(long xid, DatapathId datapathId,
										   long nBuffers, short nTables, OFAuxId auxID, Set<OFCapabilities> capabilities, long reserved);

	OVXFeaturesRequest buildOVXFeaturesRequest(long xid);

	OVXFlowRemoved buildOVXFlowRemoved(long xid, Match match, U64 cookie,
			int priority, short reason, long durationSec, long durationNsec,
			int idleTimeout, U64 packetCount, U64 byteCount);

	OVXFlowRemoved buildOVXFlowRemoved(
			long xid,
			U64 cookie,
			int priority,
			short reason,
			TableId tableId,
			long durationSec,
			long durationNsec,
			int idleTimeout,
			int hardTimeout,
			U64 packetCount,
			U64 byteCount,
			Match match);

	OVXGetConfigRequest buildOVXGetConfigRequest(long xid);

	OVXPortStatus buildOVXPortStatus(long xid, OFPortReason reason,
			OFPortDesc desc);

	OVXPortMod buildOVXPortMod(long xid, OFPort portNo, MacAddress hwAddr,
			long config, long mask, long advertise);

	OVXQueueGetConfigReply buildOVXQueueGetConfigReply(long xid, OFPort port,
			List<OFPacketQueue> queues);
	
	OVXQueueGetConfigRequest buildOVXQueueGetConfigRequest(long xid, OFPort port);

	OVXSetConfig buildOVXSetConfig(long xid, Set<OFConfigFlags> flags,
			int missSendLen);

	OVXNiciraControllerRoleReply buildOVXNiciraControllerRoleReply(long xid,
			OFNiciraControllerRole role);

	OVXNiciraControllerRoleRequest buildOVXNiciraControllerRoleRequest(
			long xid, OFNiciraControllerRole role);


	OVXActionDataLayerDestination buildOVXActionDataLayerDestination(
			MacAddress dlAddr);

	OVXActionDataLayerSource buildOVXActionDataLayerSource(MacAddress dlAddr);

	OVXActionEnqueue buildOVXActionEnqueue(OFPort port, long queueId);

	OVXActionNetworkTypeOfService buildOVXActionNetworkTypeOfService(short nwTos);

	OVXActionOutput buildOVXActionOutput(OFPort port, int maxLen);

	public OVXActionOutputV3 buildOVXActionOutputV3(OFPort port, int maxLen);

	OVXActionTransportLayerDestination buildOVXActionTransportLayerDestination(
			TransportPort tpPort);

	OVXActionTransportLayerSource buildOVXActionTransportLayerSource(
			TransportPort tpPort);

	OVXActionVirtualLanIdentifier buildOVXActionVirtualLanIdentifier(
			VlanVid vlanVid);

	OVXActionVirtualLanPriorityCodePoint buildOVXActionVirtualLanPriorityCodePoint(
			VlanPcp vlanPcp);

	OVXActionStripVirtualLan buildOVXActionStripVirtualLan();

/* Below are newly added builders for OpenFlow 1.3 actions */

	OVXMatchV3 buildOVXMatchV3 (Match match);

	OVXMatchV3 buildOVXMatchV3(OFOxmList oxmList, long cookie, byte[] pktData);

	OVXHello buildOVXHello (long xid, List<OFHelloElem> items);

	OVXActionSetField buildOVXActionSetField(OFOxm oxmField);

	OVXActionSetQueue buildOVXActionSetQueue(long queueId);

	OVXActionPopVlan buildOVXActionPopVlan();

	OVXActionPushVlan buildOVXActionPushVlan(EthType ethType);
}
