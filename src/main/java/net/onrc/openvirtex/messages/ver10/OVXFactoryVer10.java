// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_factory_class.java
// Do not modify

package net.onrc.openvirtex.messages.ver10;

import java.util.List;
import java.util.Set;

import net.onrc.openvirtex.messages.*;
import net.onrc.openvirtex.messages.actions.*;
import net.onrc.openvirtex.messages.statistics.*;
import net.onrc.openvirtex.protocol.OVXMatchV3;
import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.OFAction;
import org.projectfloodlight.openflow.protocol.action.OFActionEnqueue;
import org.projectfloodlight.openflow.protocol.action.OFActionOutput;
import org.projectfloodlight.openflow.protocol.action.OFActionSetDlDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetDlSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetNwTos;
import org.projectfloodlight.openflow.protocol.action.OFActionSetTpDst;
import org.projectfloodlight.openflow.protocol.action.OFActionSetTpSrc;
import org.projectfloodlight.openflow.protocol.action.OFActionSetVlanPcp;
import org.projectfloodlight.openflow.protocol.action.OFActionSetVlanVid;
import org.projectfloodlight.openflow.protocol.action.OFActionStripVlan;
import org.projectfloodlight.openflow.protocol.instruction.OFInstruction;
import org.projectfloodlight.openflow.protocol.match.Match;
import org.projectfloodlight.openflow.protocol.oxm.OFOxm;
import org.projectfloodlight.openflow.types.*;
import org.projectfloodlight.openflow.protocol.action.OFAction;

import net.onrc.openvirtex.messages.actions.ver10.OVXActionDataLayerDestinationVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionDataLayerSourceVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionEnqueueVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionNetworkLayerDestinationVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionNetworkLayerSourceVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionNetworkTypeOfServiceVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionOutputVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionStripVirtualLanVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionTransportLayerDestinationVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionTransportLayerSourceVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionVirtualLanIdentifierVer10;
import net.onrc.openvirtex.messages.actions.ver10.OVXActionVirtualLanPriorityCodePointVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXAggregateStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXAggregateStatsRequestVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXDescStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXDescStatsRequestVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXFlowStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXFlowStatsRequestVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXPortStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXPortStatsRequestVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXQueueStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXQueueStatsRequestVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXTableStatsReplyVer10;
import net.onrc.openvirtex.messages.statistics.ver10.OVXTableStatsRequestVer10;
import net.onrc.openvirtex.protocol.OVXMatch;



public class OVXFactoryVer10 implements OVXFactory {
    public final static OVXFactoryVer10 INSTANCE = new OVXFactoryVer10();

	@Override
	public OVXFlowModify buildOVXFlowModify(long xid, U64 cookie, U64 cookieMask, TableId tableId, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, OFGroup outGroup, Set<OFFlowModFlags> flags, Match match, List<OFInstruction> instructions) {
		return null;
	}

	@Override
	public OVXFlowDeleteStrict buildOVXFlowDeleteStrict(long xid, U64 cookie, U64 cookieMask, TableId tableId, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, OFGroup outGroup, Set<OFFlowModFlags> flags, Match match, List<OFInstruction> instructions) {
		return null;
	}

	@Override
	public OVXFlowAdd buildOVXFlowAdd(long xid, U64 cookie, U64 cookieMask, TableId tableId, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, OFGroup outGroup, Set<OFFlowModFlags> flags, Match match, List<OFInstruction> instructions) {
		return null;
	}

	@Override
	public OVXFlowModifyStrict buildOVXFlowModifyStrict(long xid, U64 cookie, U64 cookieMask, TableId tableId, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, OFGroup outGroup, Set<OFFlowModFlags> flags, Match match, List<OFInstruction> instructions) {
		return null;
	}

	@Override
	public OVXFlowDelete buildOVXFlowDelete(long xid, U64 cookie, U64 cookieMask, TableId tableId, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, OFGroup outGroup, Set<OFFlowModFlags> flags, Match match, List<OFInstruction> instructions) {
		return null;
	}

	@Override
    public OVXFlowModify buildOVXFlowModify(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<org.projectfloodlight.openflow.protocol.action.OFAction> actions){
    	return (OVXFlowModify) new OVXFlowModifyVer10( xid,
                    match,
                    cookie,
                    idleTimeout,
                    hardTimeout,
                    priority,
                    bufferId,
                    outPort,
                    flags,
                    actions);
    }


	@Override
	public OVXFlowDeleteStrict buildOVXFlowDeleteStrict(long xid, Match match,
			U64 cookie, int idleTimeout, int hardTimeout, int priority,
			OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags,
			List<OFAction> actions) {
		
		return (OVXFlowDeleteStrict) new OVXFlowDeleteStrictVer10( xid,
                match,
                cookie,
                idleTimeout,
                hardTimeout,
                priority,
                bufferId,
                outPort,
                flags,
                actions);
	}
	
	@Override
	public OVXFlowAdd buildOVXFlowAdd(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions) {
		return (OVXFlowAdd) new OVXFlowAddVer10( xid,
                match,
                cookie,
                idleTimeout,
                hardTimeout,
                priority,
                bufferId,
                outPort,
                flags,
                actions);
	}

	@Override
	public OVXFlowModifyStrict buildOVXFlowModifyStrict(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions) {
		return (OVXFlowModifyStrict) new OVXFlowModifyStrictVer10( xid,
                match,
                cookie,
                idleTimeout,
                hardTimeout,
                priority,
                bufferId,
                outPort,
                flags,
                actions);
	}
	
	@Override
	public OVXFlowDelete buildOVXFlowDelete(long xid,
			Match match,
			U64 cookie,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			Set<OFFlowModFlags> flags,
			List<OFAction> actions) {
		return (OVXFlowDelete) new OVXFlowDeleteVer10( xid,
                match,
                cookie,
                idleTimeout,
                hardTimeout,
                priority,
                bufferId,
                outPort,
                flags,
                actions);
	}


	@Override
	public OVXDescStatsReply buildOVXDescStatsReply(long xid,
			Set<OFStatsReplyFlags> flags, String mfrDesc, String hwDesc,
			String swDesc, String serialNum, String dpDesc) {
		return (OVXDescStatsReply) new OVXDescStatsReplyVer10(xid, flags,mfrDesc, hwDesc,
				swDesc,serialNum,dpDesc);
	}

	@Override
	public OVXPortDescStatsReply buildOVXPortDescStatsReply(long xid, Set<OFStatsReplyFlags> flags, List<OFPortDesc> entries) {
		return null;
	}

	@Override
	public OVXRoleReply buildOVXRoleReply(long xid, OFControllerRole role, U64 generationId) {
		return null;
	}

	@Override
	public OVXRoleRequest buildOVXRoleRequest(long xid, OFControllerRole role, U64 generationId) {
		return null;
	}


	@Override
	public OVXPacketIn buildOVXPacketIn(final OVXPacketIn pktIn) {
		
		return (OVXPacketIn) new OVXPacketInVer10(pktIn);
	}


	@Override
	public OVXPacketIn buildOVXPacketIn() {
		
		return (OVXPacketIn) new OVXPacketInVer10();
	}


	@Override
	public OVXPacketIn buildOVXPacketIn(byte[] data, short portNumber) {
		
		return (OVXPacketIn) new OVXPacketInVer10(data,portNumber);
	}

	@Override
	public OVXPacketIn buildOVXPacketIn(long xid, OFBufferId bufferId, int totalLen, OFPacketInReason reason, TableId tableId, U64 cookie, Match match, byte[] data) {
		return null;
	}

	@Override
	public OVXPacketIn buildOVXPacketIn(long xid, OFBufferId bufferId, int totalLen,
			OFPort inPort, OFPacketInReason reason, byte[] data) {
		
		return (OVXPacketIn) new OVXPacketInVer10(xid, bufferId, totalLen, inPort, reason, data);
	}


	@Override
	public OVXBadRequestErrorMsg buildOVXBadRequestErrorMsg(long xid, OFBadRequestCode code,
			OFErrorCauseData data) {
		
		return (OVXBadRequestErrorMsg) new OVXBadRequestErrorMsgVer10(xid, code, data);
	}


	@Override
	public OVXBadActionErrorMsg buildOVXBadActionErrorMsg(long xid,
			OFBadActionCode code, OFErrorCauseData msg) {
		
		return (OVXBadActionErrorMsg) new OVXBadActionErrorMsgVer10(xid, code, msg);
	}


	@Override
	public OVXFlowModFailedErrorMsg buildOVXFlowModFailedErrorMsg(long xid,
			OFFlowModFailedCode code, OFErrorCauseData msg) {
		
		return (OVXFlowModFailedErrorMsg) new OVXFlowModFailedErrorMsgVer10(xid, code, msg);
	}


	@Override
	public OVXPortModFailedErrorMsg buildOVXPortModFailedErrorMsg(long xid,
			OFPortModFailedCode code, OFErrorCauseData msg) {
		
		return (OVXPortModFailedErrorMsg) new OVXPortModFailedErrorMsgVer10(xid, code, msg);
	}


	@Override
	public OVXFlowStatsReply buildOVXFlowStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFFlowStatsEntry> entries) {
		return (OVXFlowStatsReply) new OVXFlowStatsReplyVer10(xid, flags, entries);
	}

	@Override
	public OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid, Set<OFStatsRequestFlags> flags, Match match, TableId tableId, OFPort outPort) {
		
		return (OVXFlowStatsRequest)new OVXFlowStatsRequestVer10(xid, flags, match, tableId, outPort);
	}

	@Override
	public OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid, Set<OFStatsRequestFlags> flags, TableId tableId, OFPort outPort, OFGroup outGroup, U64 cookie, U64 cookieMask, Match match) {
		return null;
	}

	@Override
	public OVXMatch buildOVXMatchV1(int wildcards, OFPort inPort, MacAddress ethSrc, MacAddress ethDst, OFVlanVidMatch vlanVid, VlanPcp vlanPcp, EthType ethType, IpDscp ipDscp, IpProtocol ipProto, IPv4Address ipv4Src, IPv4Address ipv4Dst, TransportPort tcpSrc, TransportPort tcpDst,long cookie,byte[] pktData) {
		
		return (OVXMatch)new OVXMatch(wildcards, inPort, ethDst, ethDst, vlanVid, vlanPcp, ethType, ipDscp, ipProto, ipv4Dst, ipv4Dst, tcpDst, tcpDst,cookie,pktData);
	}


	@Override
	public OVXPortStatsRequest buildOVXPortStatsRequest(long xid, Set<OFStatsRequestFlags> flags,
			OFPort portNo) {
		
		return (OVXPortStatsRequest)new OVXPortStatsRequestVer10(xid, flags, portNo);
	}


	@Override
	public OVXMatch buildOVXMatchV1(Match match) {
		
		return (OVXMatch)new OVXMatch((OFMatchV1) match);
	}


	@Override
	public OVXActionNetworkLayerSource buildOVXActionNetworkLayerSource(IPv4Address nwAddr) {
		
		return (OVXActionNetworkLayerSource)new OVXActionNetworkLayerSourceVer10(nwAddr);
	}

	@Override
	public OVXActionNetworkLayerDestination buildOVXActionNetworkLayerDestination(IPv4Address nwAddr) {
		
		return (OVXActionNetworkLayerDestination)new OVXActionNetworkLayerDestinationVer10(nwAddr);
	}


	@Override
	public OVXGetConfigReply buildOVXGetConfigReply(long xid, Set<OFConfigFlags> flags,
			int missSendLen) {
		return (OVXGetConfigReply)new OVXGetConfigReplyVer10(xid, flags, missSendLen);
	}


	@Override
	public OVXPacketOut buildOVXPacketOut() {
		
		return (OVXPacketOut)new OVXPacketOutVer10();
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(byte[] pktData, OFPort inPort,
			OFPort outPort) {
		return (OVXPacketOut)new OVXPacketOutVer10(pktData,inPort,outPort);
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(OVXPacketOut pktOut) {
		
		return (OVXPacketOut)new OVXPacketOutVer10(pktOut);
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(long xid, OFBufferId bufferId,
			OFPort inPort, List<OFAction> actions, byte[] data) {
		return (OVXPacketOut)new OVXPacketOutVer10(xid, bufferId, inPort, actions, data);
	}


	@Override
	public OVXPortStatsReply buildOVXPortStatsReply(long xid, Set<OFStatsReplyFlags> flags,
	List<OFPortStatsEntry> entries) {
		return (OVXPortStatsReply)new OVXPortStatsReplyVer10(xid, flags, entries);
	}


	@Override
	public OVXHello buildOVXHello(long xid) {
		
		return (OVXHello)new OVXHelloVer10(xid);
	}


	@Override
	public OVXAggregateStatsReply buildOVXAggregateStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			U64 packetCount, U64 byteCount, long flowCount) {
		
		return (OVXAggregateStatsReply)new OVXAggregateStatsReplyVer10(xid, flags, packetCount, byteCount, flowCount);
	}


	@Override
	public OVXQueueStatsReply buildOVXQueueStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFQueueStatsEntry> entries) {
		
		return (OVXQueueStatsReply)new OVXQueueStatsReplyVer10(xid, flags, entries);
	}


	@Override
	public OVXTableStatsReply buildOVXTableStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFTableStatsEntry> entries) {
		
		return (OVXTableStatsReply)new OVXTableStatsReplyVer10(xid, flags, entries);
	}

	@Override
	public OVXTableFeaturesStatsReply buildOVXTableFeaturesStatsReply(long xid, Set<OFStatsReplyFlags> flags, List<OFTableFeatures> entries) {
		return null;
	}


	@Override
	public OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid, Set<OFStatsRequestFlags> flags,
			Match match, TableId tableId, OFPort outPort) {
		
		return (OVXAggregateStatsRequest)new OVXAggregateStatsRequestVer10(xid, flags, match, tableId, outPort);
	}

	@Override
	public OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid, Set<OFStatsRequestFlags> flags, TableId tableId, OFPort outPort, OFGroup outGroup, U64 cookie, U64 cookieMask, Match match) {
		return null;
	}


	@Override
	public OVXDescStatsRequest buildOVXDescStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		
		return (OVXDescStatsRequest)new OVXDescStatsRequestVer10(xid, flags);
	}

	@Override
	public OVXPortDescStatsRequest buildOVXPortDescStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		return null;
	}


	@Override
	public OVXQueueStatsRequest buildOVXQueueStatsRequest(long xid, Set<OFStatsRequestFlags> flags,
			OFPort portNo, long queueId) {
		
		return (OVXQueueStatsRequest)new OVXQueueStatsRequestVer10(xid, flags, portNo, queueId);
	}


	@Override
	public OVXTableStatsRequest buildOVXTableStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		
		return (OVXTableStatsRequest)new OVXTableStatsRequestVer10(xid,flags);
	}

	@Override
	public OVXTableFeaturesStatsRequest buildOVXTableFeaturesStatsRequest(long xid, Set<OFStatsRequestFlags> flags, List<OFTableFeatures> entries) {
		return null;
	}


	@Override
	public OVXHelloFailedErrorMsg buildOVXHelloFailedErrorMsg(long xid,
			OFHelloFailedCode code, OFErrorCauseData data) {
		//to be implemented
		return null;
	}


	@Override
	public OVXQueueOpFailedErrorMsg buildOVXQueueOpFailedErrorMsg(long xid,
			OFQueueOpFailedCode code, OFErrorCauseData data) {
		//to be implemented
		return null;
	}


	@Override
	public OVXBarrierReply buildOVXBarrierReply(long xid) {
		
		return (OVXBarrierReply)new OVXBarrierReplyVer10(xid);
	}


	@Override
	public OVXBarrierRequest buildOVXBarrierRequest(long xid) {
		
		return (OVXBarrierRequest)new OVXBarrierRequestVer10(xid);
	}


	@Override
	public OVXEchoReply buildOVXEchoReply(long xid, byte[] data) {
		
		return (OVXEchoReply)new OVXEchoReplyVer10(xid, data);
	}


	@Override
	public OVXEchoRequest buildOVXEchoRequest(long xid, byte[] 
			 data) {
		
		return (OVXEchoRequest)new OVXEchoRequestVer10(xid, data);
	}


	@Override
	public OVXFeaturesReply buildOVXFeaturesReply(long xid, 
			 DatapathId datapathId, long nBuffers, short nTables, Set<OFCapabilities> capabilities, 
			 Set<OFActionType> actions, List<OFPortDesc> ports) {
		return (OVXFeaturesReply)new OVXFeaturesReplyVer10(xid, datapathId, nBuffers, nTables, capabilities, actions, ports);
	}

	@Override
	public OVXFeaturesReply buildOVXFeaturesReply(long xid, DatapathId datapathId, long nBuffers, short nTables, OFAuxId auxID, Set<OFCapabilities> capabilities, long reserved) {
		return null;
	}


	@Override
	public OVXFeaturesRequest buildOVXFeaturesRequest(long xid) {
		
		return  (OVXFeaturesRequest)new  OVXFeaturesRequestVer10(xid);
	}


	@Override
	public OVXFlowRemoved buildOVXFlowRemoved(long xid, 
			 Match match, U64 cookie, int priority, short reason, long durationSec, long durationNsec, int 
			 idleTimeout, U64 packetCount, U64 byteCount) {
		
		return (OVXFlowRemoved)new OVXFlowRemovedVer10(xid, match, cookie, priority, reason, durationSec, durationNsec,
				idleTimeout, packetCount, byteCount);
	}

	@Override
	public OVXFlowRemoved buildOVXFlowRemoved(long xid, U64 cookie, int priority, short reason, TableId tableId, long durationSec, long durationNsec, int idleTimeout, int hardTimeout, U64 packetCount, U64 byteCount, Match match) {
		return null;
	}


	@Override
	public OVXGetConfigRequest buildOVXGetConfigRequest(long xid) {
		
		return (OVXGetConfigRequest)new OVXGetConfigRequestVer10(xid) ;
	}


	@Override
	public OVXPortMod buildOVXPortMod(long xid, OFPort portNo, 
			 MacAddress hwAddr, long config, long mask, long advertise) {
		
		return (OVXPortMod)new OVXPortModVer10(xid, portNo, hwAddr, config, mask, advertise);
	}


	@Override
	public OVXPortStatus buildOVXPortStatus(long xid, 
			 OFPortReason reason, OFPortDesc desc) {
		
		return (OVXPortStatus)new OVXPortStatusVer10(xid, reason, desc);
	}


	@Override
	public OVXQueueGetConfigReply buildOVXQueueGetConfigReply(long xid, OFPort port, List<OFPacketQueue> queues) {
		
		return (OVXQueueGetConfigReply)new OVXQueueGetConfigReplyVer10(xid, port, queues);
	}


	@Override
	public OVXQueueGetConfigRequest buildOVXQueueGetConfigRequest(long xid, OFPort port) {
		
		return (OVXQueueGetConfigRequest)new OVXQueueGetConfigRequestVer10(xid, port);
	}


	@Override
	public OVXSetConfig buildOVXSetConfig(long xid, 
			 Set<OFConfigFlags> flags, int missSendLen) {
		
		return (OVXSetConfig)new OVXSetConfigVer10(xid, flags, missSendLen);
	}


	@Override
	public OVXNiciraControllerRoleReply buildOVXNiciraControllerRoleReply(long xid, OFNiciraControllerRole role) {
		
		return (OVXNiciraControllerRoleReply)new OVXNiciraControllerRoleReplyVer10(xid, role);
	}


	@Override
	public OVXNiciraControllerRoleRequest buildOVXNiciraControllerRoleRequest(long xid, OFNiciraControllerRole role) {
		
		return (OVXNiciraControllerRoleRequest)new OVXNiciraControllerRoleRequestVer10(xid, role);
	}


	@Override
	public OVXActionDataLayerDestination buildOVXActionDataLayerDestination(MacAddress dlAddr) 
	{
		
		return (OVXActionDataLayerDestination)new OVXActionDataLayerDestinationVer10(dlAddr);
	}


	@Override
	public OVXActionDataLayerSource buildOVXActionDataLayerSource(
			MacAddress dlAddr) {
		return (OVXActionDataLayerSource)new OVXActionDataLayerSourceVer10(dlAddr);
	}


	@Override
	public OVXActionEnqueue buildOVXActionEnqueue(OFPort port, long queueId) {
		return (OVXActionEnqueue)new OVXActionEnqueueVer10(port, queueId);
	}



	@Override
	public OVXActionNetworkTypeOfService buildOVXActionNetworkTypeOfService(
			short nwTos) {
		return (OVXActionNetworkTypeOfService)new OVXActionNetworkTypeOfServiceVer10(nwTos);
	}


	@Override
	public OVXActionOutput buildOVXActionOutput(OFPort port, int maxLen) {
		return (OVXActionOutput)new OVXActionOutputVer10(port, maxLen);
	}

	@Override
	public OVXActionOutputV3 buildOVXActionOutputV3(OFPort port, int maxLen) {
		return null;
	}


	@Override
	public OVXActionStripVirtualLan buildOVXActionStripVirtualLan() {
		return (OVXActionStripVirtualLan)new OVXActionStripVirtualLanVer10();
	}

	@Override
	public OVXMatchV3 buildOVXMatchV3(Match match) {
		return null;
	}

	@Override
	public OVXMatchV3 buildOVXMatchV3(OFOxmList oxmList, long cookie, byte[] pktData) {
		return null;
	}

	@Override
	public OVXHello buildOVXHello(long xid, List<OFHelloElem> items) {
		return null;
	}

	@Override
	public OVXActionSetField buildOVXActionSetField(OFOxm oxmField) {
		return null;
	}

	@Override
	public OVXActionSetQueue buildOVXActionSetQueue(long queueId) {
		return null;
	}

	@Override
	public OVXActionPopVlan buildOVXActionPopVlan() {
		return null;
	}

	@Override
	public OVXActionPushVlan buildOVXActionPushVlan(EthType ethType) {
		return null;
	}


	@Override
	public OVXActionTransportLayerDestination buildOVXActionTransportLayerDestination(
			TransportPort tpPort) {
		return (OVXActionTransportLayerDestination)new OVXActionTransportLayerDestinationVer10(tpPort);
	}


	@Override
	public OVXActionTransportLayerSource buildOVXActionTransportLayerSource(
			TransportPort tpPort) {
		return (OVXActionTransportLayerSource)new OVXActionTransportLayerSourceVer10(tpPort);
	}


	@Override
	public OVXActionVirtualLanIdentifier buildOVXActionVirtualLanIdentifier(VlanVid vlanVid) {
		return (OVXActionVirtualLanIdentifier)new OVXActionVirtualLanIdentifierVer10(vlanVid);
	}


	@Override
	public OVXActionVirtualLanPriorityCodePoint buildOVXActionVirtualLanPriorityCodePoint(VlanPcp vlanPcp) {
		return (OVXActionVirtualLanPriorityCodePoint)new OVXActionVirtualLanPriorityCodePointVer10(vlanPcp);
	}


	

	
	
	
}
