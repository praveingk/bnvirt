// Copyright (c) 2008 The Board of Trustees of The Leland Stanford Junior University
// Copyright (c) 2011, 2012 Open Networking Foundation
// Copyright (c) 2012, 2013 Big Switch Networks, Inc.
// This library was generated by the LoxiGen Compiler.
// See the file LICENSE.txt which should have been included in the source distribution

// Automatically generated by LOXI from template of_factory_class.java
// Do not modify

package net.onrc.openvirtex.messages.ver13;

import net.onrc.openvirtex.messages.*;
import net.onrc.openvirtex.messages.actions.*;
import net.onrc.openvirtex.messages.actions.ver13.*;
import net.onrc.openvirtex.messages.statistics.*;
import net.onrc.openvirtex.messages.statistics.ver13.*;
import net.onrc.openvirtex.protocol.OVXMatch;
import net.onrc.openvirtex.protocol.OVXMatchV3;
import org.projectfloodlight.openflow.protocol.*;
import org.projectfloodlight.openflow.protocol.action.OFAction;
import org.projectfloodlight.openflow.protocol.instruction.OFInstruction;
import org.projectfloodlight.openflow.protocol.match.Match;
import org.projectfloodlight.openflow.protocol.oxm.OFOxm;
import org.projectfloodlight.openflow.types.*;

import java.util.List;
import java.util.Set;


public class OVXFactoryVer13 implements OVXFactory {
    public final static OVXFactoryVer13 INSTANCE = new OVXFactoryVer13();

    @Override
    public OVXFlowModify buildOVXFlowModify(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions) {
    	return (OVXFlowModify) new OVXFlowModifyVer13(xid,
				cookie,
				cookieMask,
				tableId,
				idleTimeout,
				hardTimeout,
				priority,
				bufferId,
				outPort,
				outGroup,
				flags,
				match,
				instructions);
    }


	@Override
	public OVXFlowDeleteStrict buildOVXFlowDeleteStrict(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions) {

		return (OVXFlowDeleteStrict) new OVXFlowDeleteStrictVer13(xid,
				cookie,
				cookieMask,
				tableId,
				idleTimeout,
				hardTimeout,
				priority,
				bufferId,
				outPort,
				outGroup,
				flags,
				match,
				instructions);
	}

	@Override
	public OVXFlowAdd buildOVXFlowAdd(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions) {
		return (OVXFlowAdd) new OVXFlowAddVer13(xid,
				cookie,
				cookieMask,
				tableId,
				idleTimeout,
				hardTimeout,
				priority,
				bufferId,
				outPort,
				outGroup,
				flags,
				match,
				instructions);
	}

	@Override
	public OVXFlowModifyStrict buildOVXFlowModifyStrict(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions) {
		return (OVXFlowModifyStrict) new OVXFlowModifyStrictVer13(xid,
				cookie,
				cookieMask,
				tableId,
				idleTimeout,
				hardTimeout,
				priority,
				bufferId,
				outPort,
				outGroup,
				flags,
				match,
				instructions);
	}

	@Override
	public OVXFlowDelete buildOVXFlowDelete(
			long xid,
			U64 cookie,
			U64 cookieMask,
			TableId tableId,
			int idleTimeout,
			int hardTimeout,
			int priority,
			OFBufferId bufferId,
			OFPort outPort,
			OFGroup outGroup,
			Set<OFFlowModFlags> flags,
			Match match,
			List<OFInstruction> instructions) {
		return (OVXFlowDelete) new OVXFlowDeleteVer13(xid,
				cookie,
				cookieMask,
				tableId,
				idleTimeout,
				hardTimeout,
				priority,
				bufferId,
				outPort,
				outGroup,
				flags,
				match,
				instructions);
	}


	@Override
	public OVXFlowModify buildOVXFlowModify(long xid, Match match, U64 cookie, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags, List<OFAction> actions) {
		return null;
	}

	@Override
	public OVXFlowDeleteStrict buildOVXFlowDeleteStrict(long xid, Match match, U64 cookie, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags, List<OFAction> actions) {
		return null;
	}

	@Override
	public OVXFlowAdd buildOVXFlowAdd(long xid, Match match, U64 cookie, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags, List<OFAction> actions) {
		return null;
	}

	@Override
	public OVXFlowModifyStrict buildOVXFlowModifyStrict(long xid, Match match, U64 cookie, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags, List<OFAction> actions) {
		return null;
	}

	@Override
	public OVXFlowDelete buildOVXFlowDelete(long xid, Match match, U64 cookie, int idleTimeout, int hardTimeout, int priority, OFBufferId bufferId, OFPort outPort, Set<OFFlowModFlags> flags, List<OFAction> actions) {
		return null;
	}

	@Override
	public OVXDescStatsReply buildOVXDescStatsReply(long xid,
			Set<OFStatsReplyFlags> flags, String mfrDesc, String hwDesc,
			String swDesc, String serialNum, String dpDesc) {
		return (OVXDescStatsReply) new OVXDescStatsReplyVer13(xid, flags,mfrDesc, hwDesc,
				swDesc,serialNum,dpDesc);
	}

	@Override
	public OVXPortDescStatsReply buildOVXPortDescStatsReply(long xid, Set<OFStatsReplyFlags> flags, List<OFPortDesc> entries) {
		return (OVXPortDescStatsReply) new OVXPortDescStatsReplyVer13(xid, flags, entries);
	}

	@Override
	public OVXRoleReply buildOVXRoleReply(long xid, OFControllerRole role, U64 generationId) {
		return (OVXRoleReply) new OVXRoleReplyVer13(xid, role, generationId);
	}

	@Override
	public OVXRoleRequest buildOVXRoleRequest(long xid, OFControllerRole role, U64 generationId) {
		return (OVXRoleRequest) new OVXRoleRequestVer13(xid, role, generationId);
	}


	@Override
	public OVXPacketIn buildOVXPacketIn(final OVXPacketIn pktIn) {

		return (OVXPacketIn) new OVXPacketInVer13(pktIn);
	}


	@Override
	public OVXPacketIn buildOVXPacketIn() {

		return (OVXPacketIn) new OVXPacketInVer13();
	}


	@Override
	public OVXPacketIn buildOVXPacketIn(byte[] data, short portNumber) {

		return (OVXPacketIn) new OVXPacketInVer13(data,portNumber);
	}

	@Override
	public OVXPacketIn buildOVXPacketIn(long xid,
										OFBufferId bufferId,
										int totalLen,
										OFPacketInReason reason,
										TableId tableId,
										U64 cookie,
										Match match,
										byte[] data){

		return (OVXPacketIn) new OVXPacketInVer13(xid, bufferId, totalLen, reason, tableId, cookie, match, data);
	}


	@Override
	public OVXBadRequestErrorMsg buildOVXBadRequestErrorMsg(long xid, OFBadRequestCode code,
			OFErrorCauseData data) {

		return (OVXBadRequestErrorMsg) new OVXBadRequestErrorMsgVer13(xid, code, data);
	}


	@Override
	public OVXBadActionErrorMsg buildOVXBadActionErrorMsg(long xid,
			OFBadActionCode code, OFErrorCauseData msg) {

		return (OVXBadActionErrorMsg) new OVXBadActionErrorMsgVer13(xid, code, msg);
	}


	@Override
	public OVXFlowModFailedErrorMsg buildOVXFlowModFailedErrorMsg(long xid,
			OFFlowModFailedCode code, OFErrorCauseData msg) {

		return (OVXFlowModFailedErrorMsg) new OVXFlowModFailedErrorMsgVer13(xid, code, msg);
	}


	@Override
	public OVXPortModFailedErrorMsg buildOVXPortModFailedErrorMsg(long xid,
			OFPortModFailedCode code, OFErrorCauseData msg) {

		return (OVXPortModFailedErrorMsg) new OVXPortModFailedErrorMsgVer13(xid, code, msg);
	}


	@Override
	public OVXFlowStatsReply buildOVXFlowStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFFlowStatsEntry> entries) {
		return (OVXFlowStatsReply) new OVXFlowStatsReplyVer13(xid, flags, entries);
	}

	@Override
	public OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid, Set<OFStatsRequestFlags> flags, Match match, TableId tableId, OFPort outPort) {
		return null;
	}

	@Override
	public OVXFlowStatsRequest buildOVXFlowStatsRequest(long xid,
														Set<OFStatsRequestFlags> flags,
														TableId tableId,
														OFPort outPort,
														OFGroup outGroup,
														U64 cookie,
														U64 cookieMask,
														Match match)  {

		return (OVXFlowStatsRequest)new OVXFlowStatsRequestVer13(xid, flags, tableId, outPort, outGroup, cookie, cookieMask,  match);
	}

	@Override
	public OVXMatch buildOVXMatchV1(int wildcards, OFPort inPort, MacAddress ethSrc, MacAddress ethDst, OFVlanVidMatch vlanVid, VlanPcp vlanPcp, EthType ethType, IpDscp ipDscp, IpProtocol ipProto, IPv4Address ipv4Src, IPv4Address ipv4Dst, TransportPort tcpSrc, TransportPort tcpDst,long cookie,byte[] pktData) {

		return (OVXMatch)new OVXMatch(wildcards, inPort, ethDst, ethDst, vlanVid, vlanPcp, ethType, ipDscp, ipProto, ipv4Dst, ipv4Dst, tcpDst, tcpDst,cookie,pktData);
	}


	@Override
	public OVXPortStatsRequest buildOVXPortStatsRequest(long xid, Set<OFStatsRequestFlags> flags,
			OFPort portNo) {

		return (OVXPortStatsRequest)new OVXPortStatsRequestVer13(xid, flags, portNo);
	}


	@Override
	public OVXMatch buildOVXMatchV1(Match match) {

		return (OVXMatch)new OVXMatch((OFMatchV1) match);
	}


	@Override
	public OVXActionNetworkLayerSource buildOVXActionNetworkLayerSource(IPv4Address nwAddr) {

		return null;
	}

	@Override
	public OVXActionNetworkLayerDestination buildOVXActionNetworkLayerDestination(IPv4Address nwAddr) {

		return null;
	}


	@Override
	public OVXGetConfigReply buildOVXGetConfigReply(long xid, Set<OFConfigFlags> flags,
			int missSendLen) {
		return (OVXGetConfigReply)new OVXGetConfigReplyVer13(xid, flags, missSendLen);
	}

	@Override
	public OVXPacketIn buildOVXPacketIn(long xid, OFBufferId bufferId, int totalLen, OFPort inPort, OFPacketInReason reason, byte[] data) {
		return null;
	}


	@Override
	public OVXPacketOut buildOVXPacketOut() {

		return (OVXPacketOut)new OVXPacketOutVer13();
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(byte[] pktData, OFPort inPort,
			OFPort outPort) {
		return (OVXPacketOut)new OVXPacketOutVer13(pktData,inPort,outPort);
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(OVXPacketOut pktOut) {

		return (OVXPacketOut)new OVXPacketOutVer13(pktOut);
	}


	@Override
	public OVXPacketOut buildOVXPacketOut(long xid, OFBufferId bufferId,
			OFPort inPort, List<OFAction> actions, byte[] data) {
		return (OVXPacketOut)new OVXPacketOutVer13(xid, bufferId, inPort, actions, data);
	}


	@Override
	public OVXPortStatsReply buildOVXPortStatsReply(long xid, Set<OFStatsReplyFlags> flags,
	List<OFPortStatsEntry> entries) {
		return (OVXPortStatsReply)new OVXPortStatsReplyVer13(xid, flags, entries);
	}


	@Override
	public OVXHello buildOVXHello(long xid) {
		
		return (OVXHello)new OVXHelloVer13(xid, null);
	}


	@Override
	public OVXAggregateStatsReply buildOVXAggregateStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			U64 packetCount, U64 byteCount, long flowCount) {
		
		return (OVXAggregateStatsReply)new OVXAggregateStatsReplyVer13(xid, flags, packetCount, byteCount, flowCount);
	}


	@Override
	public OVXQueueStatsReply buildOVXQueueStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFQueueStatsEntry> entries) {
		
		return (OVXQueueStatsReply)new OVXQueueStatsReplyVer13(xid, flags, entries);
	}


	@Override
	public OVXTableStatsReply buildOVXTableStatsReply(long xid, Set<OFStatsReplyFlags> flags,
			List<OFTableStatsEntry> entries) {
		
		return (OVXTableStatsReply)new OVXTableStatsReplyVer13(xid, flags, entries);
	}

	@Override
	public OVXTableFeaturesStatsReply buildOVXTableFeaturesStatsReply(long xid, Set<OFStatsReplyFlags> flags, List<OFTableFeatures> entries) {
		return (OVXTableFeaturesStatsReply)new OVXTableFeaturesStatsReplyVer13(xid, flags, entries);
	}

	@Override
	public OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid, Set<OFStatsRequestFlags> flags, Match match, TableId tableId, OFPort outPort) {
		return null;
	}


	@Override
	public OVXAggregateStatsRequest buildOVXAggregateStatsRequest(long xid,
																  Set<OFStatsRequestFlags> flags,
																  TableId tableId, OFPort outPort,
																  OFGroup outGroup,
																  U64 cookie,
																  U64 cookieMask,
																  Match match) {
		
		return (OVXAggregateStatsRequest)new OVXAggregateStatsRequestVer13(xid, flags, tableId, outPort, outGroup, cookie, cookieMask, match);
	}


	@Override
	public OVXDescStatsRequest buildOVXDescStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		
		return (OVXDescStatsRequest)new OVXDescStatsRequestVer13(xid, flags);
	}

	@Override
	public OVXPortDescStatsRequest buildOVXPortDescStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		return (OVXPortDescStatsRequest) new OVXPortDescStatsRequestVer13(xid, flags);
	}


	@Override
	public OVXQueueStatsRequest buildOVXQueueStatsRequest(long xid, Set<OFStatsRequestFlags> flags,
			OFPort portNo, long queueId) {
		
		return (OVXQueueStatsRequest)new OVXQueueStatsRequestVer13(xid, flags, portNo, queueId);
	}


	@Override
	public OVXTableStatsRequest buildOVXTableStatsRequest(long xid, Set<OFStatsRequestFlags> flags) {
		
		return (OVXTableStatsRequest)new OVXTableStatsRequestVer13(xid,flags);
	}

	@Override
	public OVXTableFeaturesStatsRequest buildOVXTableFeaturesStatsRequest(long xid, Set<OFStatsRequestFlags> flags, List<OFTableFeatures> entries) {
		return (OVXTableFeaturesStatsRequest)new OVXTableFeaturesStatsRequestVer13(xid,flags, entries);
	}


	@Override
	public OVXHelloFailedErrorMsg buildOVXHelloFailedErrorMsg(long xid,
			OFHelloFailedCode code, OFErrorCauseData data) {
		//to be implemented
		return null;
	}


	@Override
	public OVXQueueOpFailedErrorMsg buildOVXQueueOpFailedErrorMsg(long xid,
			OFQueueOpFailedCode code, OFErrorCauseData data) {
		//to be implemented
		return null;
	}


	@Override
	public OVXBarrierReply buildOVXBarrierReply(long xid) {
		
		return (OVXBarrierReply)new OVXBarrierReplyVer13(xid);
	}


	@Override
	public OVXBarrierRequest buildOVXBarrierRequest(long xid) {
		
		return (OVXBarrierRequest)new OVXBarrierRequestVer13(xid);
	}


	@Override
	public OVXEchoReply buildOVXEchoReply(long xid, byte[] data) {
		
		return (OVXEchoReply)new OVXEchoReplyVer13(xid, data);
	}


	@Override
	public OVXEchoRequest buildOVXEchoRequest(long xid, byte[] 
			 data) {
		
		return (OVXEchoRequest)new OVXEchoRequestVer13(xid, data);
	}

	@Override
	public OVXFeaturesReply buildOVXFeaturesReply(long xid, DatapathId datapathId, long nBuffers, short nTables, Set<OFCapabilities> capabilities, Set<OFActionType> actions, List<OFPortDesc> ports) {
		return null;
	}


	@Override
	public OVXFeaturesReply buildOVXFeaturesReply(long xid, DatapathId datapathId,
												  long nBuffers, short nTables, OFAuxId auxID, Set<OFCapabilities> capabilities, long reserved) {
		return (OVXFeaturesReply)new OVXFeaturesReplyVer13(xid, datapathId, nBuffers, nTables, auxID, capabilities, reserved);
	}


	@Override
	public OVXFeaturesRequest buildOVXFeaturesRequest(long xid) {
		
		return  (OVXFeaturesRequest)new OVXFeaturesRequestVer13(xid);
	}

	@Override
	public OVXFlowRemoved buildOVXFlowRemoved(long xid, Match match, U64 cookie, int priority, short reason, long durationSec, long durationNsec, int idleTimeout, U64 packetCount, U64 byteCount) {
		return null;
	}


	@Override
	public OVXFlowRemoved buildOVXFlowRemoved(
			long xid,
			U64 cookie,
			int priority,
			short reason,
			TableId tableId,
			long durationSec,
			long durationNsec,
			int idleTimeout,
			int hardTimeout,
			U64 packetCount,
			U64 byteCount,
			Match match) {
		
		return (OVXFlowRemoved)new OVXFlowRemovedVer13(xid, cookie, priority, reason, tableId, durationSec, durationNsec, idleTimeout, hardTimeout, packetCount, byteCount, match);
	}


	@Override
	public OVXGetConfigRequest buildOVXGetConfigRequest(long xid) {
		
		return (OVXGetConfigRequest)new OVXGetConfigRequestVer13(xid) ;
	}


	@Override
	public OVXPortMod buildOVXPortMod(long xid, OFPort portNo, 
			 MacAddress hwAddr, long config, long mask, long advertise) {
		
		return (OVXPortMod)new OVXPortModVer13(xid, portNo, hwAddr, config, mask, advertise);
	}


	@Override
	public OVXPortStatus buildOVXPortStatus(long xid, 
			 OFPortReason reason, OFPortDesc desc) {
		
		return (OVXPortStatus)new OVXPortStatusVer13(xid, reason, desc);
	}


	@Override
	public OVXQueueGetConfigReply buildOVXQueueGetConfigReply(long xid, OFPort port, List<OFPacketQueue> queues) {
		
		return (OVXQueueGetConfigReply)new OVXQueueGetConfigReplyVer13(xid, port, queues);
	}


	@Override
	public OVXQueueGetConfigRequest buildOVXQueueGetConfigRequest(long xid, OFPort port) {
		
		return (OVXQueueGetConfigRequest)new OVXQueueGetConfigRequestVer13(xid, port);
	}


	@Override
	public OVXSetConfig buildOVXSetConfig(long xid, 
			 Set<OFConfigFlags> flags, int missSendLen) {
		
		return (OVXSetConfig)new OVXSetConfigVer13(xid, flags, missSendLen);
	}

	@Override
	public OVXNiciraControllerRoleReply buildOVXNiciraControllerRoleReply(long xid, OFNiciraControllerRole role) {
		return null;
	}

	@Override
	public OVXNiciraControllerRoleRequest buildOVXNiciraControllerRoleRequest(long xid, OFNiciraControllerRole role) {
		return null;
	}

	@Override
	public OVXActionDataLayerDestination buildOVXActionDataLayerDestination(MacAddress dlAddr) {
		return null;
	}

	@Override
	public OVXActionDataLayerSource buildOVXActionDataLayerSource(MacAddress dlAddr) {
		return null;
	}

	@Override
	public OVXActionEnqueue buildOVXActionEnqueue(OFPort port, long queueId) {
		return null;
	}

	@Override
	public OVXActionNetworkTypeOfService buildOVXActionNetworkTypeOfService(short nwTos) {
		return null;
	}

	@Override
	public OVXActionOutput buildOVXActionOutput(OFPort port, int maxLen) {
		return null;
	}

	@Override
	public OVXActionOutputV3 buildOVXActionOutputV3(OFPort port, int maxLen) {
		return (OVXActionOutputV3) new OVXActionOutputVer13(port, maxLen);
	}

	@Override
	public OVXActionTransportLayerDestination buildOVXActionTransportLayerDestination(TransportPort tpPort) {
		return null;
	}

	@Override
	public OVXActionTransportLayerSource buildOVXActionTransportLayerSource(TransportPort tpPort) {
		return null;
	}

	@Override
	public OVXActionVirtualLanIdentifier buildOVXActionVirtualLanIdentifier(VlanVid vlanVid) {
		return null;
	}

	@Override
	public OVXActionVirtualLanPriorityCodePoint buildOVXActionVirtualLanPriorityCodePoint(VlanPcp vlanPcp) {
		return null;
	}

	@Override
	public OVXActionStripVirtualLan buildOVXActionStripVirtualLan() {
		return null;
	}




/* Pravein:  Below are newly added to support OpenFlow 1.3 */

	@Override
	public OVXMatchV3 buildOVXMatchV3(Match match) {
		return (OVXMatchV3)new OVXMatchV3((OFMatchV3) match);
	}

	@Override
	public OVXMatchV3 buildOVXMatchV3(OFOxmList oxmList, long cookie, byte[] pktData) {
		return (OVXMatchV3)new OVXMatchV3(oxmList, cookie, pktData);
	}
	@Override
	public OVXHello buildOVXHello(long xid, List<OFHelloElem> items) {

		return (OVXHello)new OVXHelloVer13(xid, items);
	}


	@Override
	public OVXActionSetField buildOVXActionSetField(OFOxm oxmField) {
		return (OVXActionSetField)new OVXActionSetFieldVer13(oxmField);
	}

	@Override
	public OVXActionSetQueue buildOVXActionSetQueue(long queueId) {
		return (OVXActionSetQueue)new OVXActionSetQueueVer13(queueId);
	}

	@Override
	public OVXActionPopVlan buildOVXActionPopVlan() {
		return (OVXActionPopVlan)new OVXActionPopVlanVer13();
	}

	@Override
	public OVXActionPushVlan buildOVXActionPushVlan(EthType ethType) {
		return (OVXActionPushVlan)new OVXActionPushVlanVer13(ethType);
	}


}
